openapi: 3.0.3
info:
  title: Academie Prologin
  version: 1.0.0
  contact:
    email: info@prologin.org
servers:
  - url: https://academie.prologin.org/api
  - url: http://127.0.0.1:8080/api
tags:
  - name: Activities
    description: Groups of problems
  - name: Submissions
    description: Code submitted by students
paths:
  /activities/{activityId}/:
    put:
      tags:
        - Activities
      summary: Modify an existing activity
      parameters:
        - name: activityId
          in: path
          description: id of the activity
          required: true
          schema:
            type: string
      requestBody:
        description: Manifest of the new version of the activity
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                version:
                  type: string
      responses:
        '200':
          description: Activity succesfully created
        '404':
          description: Invalid Id
  /activities/:
    get:
      tags:
        - Activities
      summary: Get all activities
      responses:
        '200':
          description: Array of activities
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  next:
                    type: string
                    format: uri
                  previous:
                    type: string
                    format: uri
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/ActivityManifest'
  /activities/{activityId}/:
    get:
      tags:
        - Activities
      summary: Get the activity manifest associated with the given Id
      parameters:
        - name: activityId
          in: path
          description: Activity Id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Activity manifest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityManifest'
        '405':
          description: Invalid Id

  /submissions/code/:
    post:
      tags:
        - Submissions
      summary: Submit a code
      requestBody:
        description: The code submission of a student for a problem
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmissionCode'
      responses:
        '200':
          description: Code succesfully dispatched
          content:
            application/json:
              schema:
                type: object
                properties:
                  submission_id:
                    type: string
                    format: uuid
        '405':
          description: Invalid input
  /submission/{submissionId}/:
    get:
      tags:
        - Submissions
      summary: Get the status of the submission
      parameters:
        - name: submissionId
          in: path
          description: The submission Id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Status succesfully received
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionStatus'
        '405':
          description: Invalid submission id
components:
  schemas:
    ActivityManifest:
      type: object
      required:
        - id
        - slug
        - title
        - description
        - author
        - version
        - opening
        - closing
        - publication
      properties:
        id:
          type: string
          format: uuid
        slug:
          type: string
        title:
          type: string
        description:
          type: string
        author:
          type: string
        version:
          type: string
        opening:
          type: string
          format: date-time
        closing:
          type: string
          format: date-time
        publication:
          type: string
          format: date-time
        problems:
          type: array
          items:
            $ref: '#/components/schemas/ProblemDefinition'
    ProblemDefinition:
      type: object
      required:
        - id
        - title
        - description
        - subject
        - difficulty
        - allowed_languages
        - skeletons
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        subject:
          type: string
        difficulty:
          type: string
          enum:
            - trivial
            - easy
            - medium
            - hard
            - very_hard
        allowed_languages:
          type: array
          items:
            $ref: '#/components/schemas/AllowedLanguage'
        skeletons:
          type: object
    SubmissionCode:
      type: object
      required:
        - problem_id
        - user_id
        - language
        - code
      properties:
        problem_id:
          type: string
          format: uuid
        language:
          $ref: '#/components/schemas/AllowedLanguage'
        code:
          type: string
    SubmissionStatus:
      type: object
      properties:
        done:
          type: boolean
        validated:
          type: boolean
        validated_at:
          type: string
          format: date-time
        code:
          type: string
    AllowedLanguage:
      type: string
      enum:
        - ada
        - c
        - c#
        - c++
        - d
        - go
        - haskell
        - java
        - javascript
        - lua
        - ocaml
        - pascal
        - perl
        - php
        - prolog
        - python
        - ruby
        - rust
        - scheme
