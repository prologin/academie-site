"""
Django settings for template project.

Generated by 'django-admin startproject' using Django 4.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from datetime import timedelta

from pathlib import Path

from django_utils import env


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.get_secret("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.get_bool("DJANGO_DEBUG", False)

ALLOWED_HOSTS = env.get_list("DJANGO_ALLOWED_HOSTS", [])
DEFAULT_DOMAIN = ALLOWED_HOSTS[0] if ALLOWED_HOSTS else "localhost"

# A list of the emails who get error notifications.
ADMINS = [(mail, mail) for mail in env.get_list("DJANGO_ADMINS", [])]

# Redirect plain HTTP requests to HTTPS.
SECURE_SSL_REDIRECT = not DEBUG

# Avoid transmitting the CSRF cookie over HTTP accidentally.
CSRF_COOKIE_SECURE = not DEBUG

# Avoid transmitting the session cookie over HTTP accidentally.
SESSION_COOKIE_SECURE = not DEBUG

# See https://docs.djangoproject.com/en/4.0/ref/middleware/#referrer-policy
SECURE_REFERRER_POLICY = "strict-origin-when-cross-origin"

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# redis config
REDIS_HOSTNAME = env.get_string("REDIS_HOSTNAME", "localhost"),

# celery config

CELERY_RESULT_EXPIRES = timedelta(minutes=1)
CELERY_BROKER_URL = f"redis://redis_dev:6379/0"
CELERY_RESULT_BACKEND = f"redis://redis_dev:6379/0"

# camisole config

CAMISOLE_ENDPOINT_URL = "http://vm.prologin.org/run"


MIDDLEWARE = [
    "django_prometheus.middleware.PrometheusBeforeMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_prometheus.middleware.PrometheusAfterMiddleware",
]

ROOT_URLCONF = "evaluator.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [Path.joinpath(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "evaluator.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django_prometheus.db.backends.postgresql",
        "NAME": env.get_string("DB_NAME", "template"),
        "USER": env.get_string("DB_USER", "template"),
        "PASSWORD": env.get_secret("DB_PASSWORD"),
        "HOST": env.get_string("DB_HOST", "localhost"),
        "PORT": env.get_int("DB_PORT", 5432),
    }
}


# Caches

# TODO: CACHES with django-prometheus integration

# redis cache 

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": f"redis://redis_dev:6379/1",
        "TIMEOUT": 60,
    },
}

# user model use for authentification

AUTH_USER_MODEL = "authentification.ProloginUser"

# jwt configuration

DEFAULTS = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=5),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False, # could be a good things to add
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUDIENCE": None,
    "ISSUER": None,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "JTI_CLAIM": "jti",
    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
}

# rest framework configuration

REST_FRAMEWORK = {
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",  # noqa: E501
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",  # noqa: E501
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",  # noqa: E501
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",  # noqa: E501
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "fr-fr"

TIME_ZONE = "Europe/Paris"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

COLLECTFAST_DEBUG = DEBUG

COLLECTFAST_STRATEGY = "collectfast.strategies.boto3.Boto3Strategy"

STATICFILES_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"

AWS_ACCESS_KEY_ID = env.get_secret("S3_ACCESS_KEY")
AWS_SECRET_ACCESS_KEY = env.get_secret("S3_SECRET_KEY")
AWS_STORAGE_BUCKET_NAME = env.get_string("S3_BUCKET", "template")
AWS_S3_ENDPOINT_URL = env.get_string("S3_ENDPOINT")
AWS_S3_CUSTOM_DOMAIN = env.get_string("S3_CUSTOM_DOMAIN", "") or None
AWS_S3_SECURE_URLS = env.get_bool("S3_SECURE_URLS", True)

STATIC_URL = (
    ("https://" if AWS_S3_SECURE_URLS else "http://")
    + (AWS_S3_CUSTOM_DOMAIN or "localhost:8020/evaluator")
    + "/static/"
)

# media config

MEDIA_URL = (
    ("https://" if AWS_S3_SECURE_URLS else "http://")
    + (AWS_S3_CUSTOM_DOMAIN or "localhost:8020/evaluator")
    + "/media/"
)

AWS_QUERYSTRING_AUTH = True
AWS_S3_OBJECT_PARAMETERS = {"ACL": "public-read"}

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.humanize",
    "collectfast",  # Must be loaded before staticfiles
    "django.contrib.staticfiles",
    "debug_toolbar",
    "django_prometheus",
    "status.apps.StatusConfig",
    "problems.apps.ProblemsConfig",
    "activities.apps.ActivitiesConfig",
    "submissions.apps.SubmissionsConfig",
    "authentification.apps.AuthentificationConfig",
    "misc.apps.MiscConfig",
    "reset.apps.ResetConfig",
    "drf_yasg",
    "rest_framework_simplejwt",
    "django_rest_passwordreset",
    "rest_framework",
]

# Email settings

DEFAULT_FROM_EMAIL = env.get_string(
    "DJANGO_DEFAULT_FROM_EMAIL", f"noreply@{DEFAULT_DOMAIN}"
)
EMAIL_SUBJECT_PREFIX = env.get_string(
    "DJANGO_EMAIL_SUBJECT_PREFIX", "[DJANGO] "
)

if DEBUG:
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
else:
    EMAIL_HOST = env.get_string("DJANGO_SMTP_HOSTNAME", "localhost")
    EMAIL_PORT = env.get_string("DJANGO_SMTP_PORT", 25)
    EMAIL_HOST_USER = env.get_string("DJANGO_SMTP_USER", "")
    EMAIL_HOST_PASSWORD = env.get_secret("DJANGO_SMTP_PASSWORD", "")
    EMAIL_USE_TLS = env.get_bool("DJANGO_SMTP_STARTTLS", False)


# Django debug toolbar

def show_toolbar(request):
    from django.conf import settings  # pylint:disable=import-outside-toplevel

    return settings.DEBUG


DEBUG_TOOLBAR_CONFIG = {
    "SHOW_TOOLBAR_CALLBACK": "evaluator.settings.settings.show_toolbar",
    "SHOW_COLLAPSED": True,
}

# Tests

TEST_OUTPUT_DIR = BASE_DIR / "test-reports"